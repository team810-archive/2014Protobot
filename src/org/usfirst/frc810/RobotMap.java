// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc810;
    
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainController1;
    public static SpeedController driveTrainController2;
    public static RobotDrive driveTrainDrive;
    public static Compressor pistonCompressor;
    public static Solenoid pistonSolenoidValve;
    public static SpeedController motorShooterMotor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainController1 = new Victor(1, 1);
	LiveWindow.addActuator("DriveTrain", "Controller1", (Victor) driveTrainController1);
        
        driveTrainController2 = new Victor(1, 2);
	LiveWindow.addActuator("DriveTrain", "Controller2", (Victor) driveTrainController2);
        
        driveTrainDrive = new RobotDrive(driveTrainController1, driveTrainController2);
	
        driveTrainDrive.setSafetyEnabled(false);
        driveTrainDrive.setExpiration(0.1);
        driveTrainDrive.setSensitivity(0.5);
        driveTrainDrive.setMaxOutput(1.0);
        driveTrainDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);        

        pistonCompressor = new Compressor(1, 1, 1, 1);
	
        
        pistonSolenoidValve = new Solenoid(1, 1);
	LiveWindow.addActuator("Piston", "SolenoidValve", pistonSolenoidValve);
        
        motorShooterMotor = new Victor(1, 3);
	LiveWindow.addActuator("Motor", "ShooterMotor", (Victor) motorShooterMotor);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
